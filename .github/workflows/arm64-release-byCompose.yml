name: Get-AMD64-Docker-Images-From-Compose

on:
  workflow_dispatch:
    inputs:
      compose_file_path:
        description: '请输入 docker-compose 文件路径（例如：./docker-compose.yml）'
        required: true
        default: './docker-compose.yml'

jobs:
  pull_and_package:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Images from Docker Compose file
        id: extract_images
        run: |
          COMPOSE_FILE="${{ github.event.inputs.compose_file_path }}"
          if [[ ! -f "$COMPOSE_FILE" ]]; then
            echo "Error: File not found at path $COMPOSE_FILE"
            exit 1
          fi

          # Install yq if not present
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/y  # 注意这里应该是 yq 而不是 y
          
          # Read all image fields using yq
          IMAGES=$(yq e '..|.image? | select(.)' "$COMPOSE_FILE" | tr '\n' ',' | sed 's/,$//')

          if [ -z "$IMAGES" ]; then
            echo "No images found in the compose file."
            exit 1
          fi

          echo "Extracted images: $IMAGES"
          echo "images=$IMAGES" >> $GITHUB_OUTPUT

      - name: Pull Docker Images and Package
        run: |
          images="${{ steps.extract_images.outputs.images }}"
          IFS=',' read -r -a image_array <<< "$images"
          for image in "${image_array[@]}"; do
            docker pull "${image}" --platform "linux/amd64"
            image_name="${image//\//_}"
            image_name="${image_name//:/_}"
            docker save "${image}" -o "${image_name}-amd64.tar"
            gzip -c "${image_name}-amd64.tar" > "${image_name}-amd64.tar.gz"
            rm "${image_name}-amd64.tar"
          done

      - name: List generated files (debug step)
        run: |
          echo "Preparing docker images list (.tar.gz) files:"
          find $GITHUB_WORKSPACE -name "*.tar.gz"
          release_name=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M Build')
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@master
        with:
          tag_name: DockerTarBuilder-AMD64
          name: ${{ env.RELEASE_NAME }} for x86-64
          body: |
            [![Github](https://img.shields.io/badge/RELEASE:DockerTarBuilder-123456?logo=github&logoColor=fff&labelColor=green&style=for-the-badge)](https://www.bilibili.com/video/BV1EZ421M7mL) [![Github](https://img.shields.io/badge/国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://wkdaily.cpolar.top/archives/1)
            ### How to use? For example
            `docker load -i alpine_latest.tar.gz `
            ### Video teaching
            [![Bilibili](https://img.shields.io/badge/Bilibili-123456?logo=bilibili&logoColor=fff&labelColor=fb7299)](https://www.bilibili.com/video/BV1yyq6YREdF)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Docker images as release assets
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: DockerTarBuilder-AMD64
          files: ${{ github.workspace }}/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
