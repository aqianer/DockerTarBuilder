name: 下载Python依赖Whl并上传Release
on:
  # 支持手动触发（可自定义输入参数）
  workflow_dispatch:
    inputs:
      requirementsPath:
        description: 'requirements.txt文件路径（如：./requirements.txt）'
        required: true
        default: './requirements.txt'
      releaseVersion:
        description: 'Release版本号（如：v1.0.0）'
        required: true
        default: 'v1.0.0'
      pythonVersion:
        description: 'requirements.txt对应的python版本'
        required: false
        default: '3.11'
  # 可选：推代码时自动触发（需删除inputs，固定路径和版本）
  # push:
  #   branches: [ main ]

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取当前仓库代码（获取requirements.txt）
      - name: 检出代码
        uses: actions/checkout@v4

      # 2. 配置Python环境（匹配Docker构建时的Python版本）
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.pythonVersion }}  # 需改为你的Docker使用的Python版本

      # 3. 下载requirements中的所有whl包到指定目录
      - name: 下载Whl依赖
        run: |
          # 创建存放whl的目录
          mkdir -p python-whls
          # 用pip下载whl（--platform指定平台，避免版本不兼容）
          pip download -r ${{ github.event.inputs.requirementsPath }} \
            -d ./python-whls \
            --platform manylinux2014_x86_64  # 需匹配Docker基础镜像的架构（如arm64改对应值）

      # 4. 压缩whl目录（方便上传和下载）
      - name: 压缩Whl文件
        run: zip -r python-whls-${{ github.event.inputs.releaseVersion }}.zip ./python-whls

      # 5. 创建GitHub Release（用于存储whl压缩包）
      - name: 创建Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 仓库默认密钥，无需额外配置
        with:
          tag_name: ${{ github.event.inputs.releaseVersion }}
          release_name: Python Whl Packages ${{ github.event.inputs.releaseVersion }}
          draft: false
          prerelease: false

      # 6. 上传压缩后的whl包到Release
      - name: 上传Whl压缩包到Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./python-whls-${{ github.event.inputs.releaseVersion }}.zip
          asset_name: python-whls-${{ github.event.inputs.releaseVersion }}.zip
          asset_content_type: application/zip
