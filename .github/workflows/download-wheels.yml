name: Download Wheels (Robust Version)

on:
  workflow_dispatch:
    inputs:
      WHEEL_NAMES:
        description: "Comma-separated list of wheel filenames (e.g. watchdog-6.0.0-cp39-cp39-manylinux2014_x86_64.whl,requests-2.31.0-py3-none-any.whl)"
        required: true
        default: "watchdog-6.0.0-cp39-cp39-manylinux2014_x86_64.whl"
        type: string

jobs:
  download_wheels:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 🔍 Step 1: Debug - Inspect raw input with hex dump
      - name: 🔍 Debug: Inspect raw INPUT_WHEEL_NAMES (with hex dump)
        run: |
          echo "=== RAW INPUT (hex): ==="
          echo -n "$INPUT_WHEEL_NAMES" | xxd
          echo ""
          echo "=== Length: $(echo -n "$INPUT_WHEEL_NAMES" | wc -c) characters ==="
          echo "=== Is empty? $( [ -z "$INPUT_WHEEL_NAMES" ] && echo yes || echo no ) ==="
          echo "=== First 10 chars: $(echo -n "$INPUT_WHEEL_NAMES" | head -c 10) ==="

      # 🛠️ Step 2: Prepare wheel list (ULTIMATE FIX)
      - name: 🛠️ Prepare wheel list (robust version)
        id: parse_wheels
        run: |
          # 🔥 Step 1: Clean input (remove \n, \r, spaces, BOM)
          input=$(echo "$INPUT_WHEEL_NAMES" | tr -d '\n\r' | xargs)

          # 🔍 Step 2: Debug cleaned input
          echo "🔍 Cleaned input: '$input'"
          echo "🔍 Cleaned length: $(echo -n "$input" | wc -c)"

          # ❌ Step 3: If empty after cleanup, fail early
          if [ -z "$input" ]; then
            echo "❌ Input is empty after cleanup!"
            echo "  Please check your workflow_dispatch input — no valid characters found."
            exit 1
          fi

          # 📥 Step 4: Split by comma
          IFS=',' read -ra WHEEL_ARRAY <<< "$input"
          wheels=()

          for wheel in "${WHEEL_ARRAY[@]}"; do
            wheel=$(echo "$wheel" | xargs)  # Remove extra spaces
            if [[ -z "$wheel" ]]; then
              continue
            fi

            # ✅ Step 5: Strong regex: matches package-version-...whl format
            if [[ "$wheel" =~ ^([a-zA-Z0-9_-]+)-([0-9]+\.[0-9]+\.[0-9]+)(?:-[a-zA-Z0-9_.]+)*\.whl$ ]]; then
              pkg_name="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              wheels+=("$pkg_name==$version")
              echo "✅ Matched: $wheel → $pkg_name==$version"
            else
              echo "❌ Failed to parse: $wheel"
              echo "  Hint: Must be like: package-version-cpXX-...whl"
            fi
          done

          # 🚨 Step 6: Check if any valid wheels found
          if [ ${#wheels[@]} -eq 0 ]; then
            echo "⚠️  No valid wheel names found after parsing."
            echo "  Please ensure input is comma-separated and uses valid wheel filenames."
            echo "  Example: watchdog-6.0.0-cp39-cp39-manylinux2014_x86_64.whl,requests-2.31.0-py3-none-any.whl"
            exit 1
          fi

          # ✅ Step 7: Export to environment
          echo "WHEELS=$(printf '%s ' "${wheels[@]}")" >> $GITHUB_ENV
          echo "🔍 Final packages to download: $WHEELS"

      # 🧪 Step 3: Test with hardcoded example (optional, for verification)
      - name: ✅ Test: Hardcoded working input
        run: |
          echo "Testing with hardcoded input..."
          test_input="watchdog-6.0.0-cp39-cp39-manylinux2014_x86_64.whl"
          if [[ "$test_input" =~ ^([a-zA-Z0-9_-]+)-([0-9]+\.[0-9]+\.[0-9]+)(?:-[a-zA-Z0-9_.]+)*\.whl$ ]]; then
            echo "✅ PASS: Hardcoded input matches!"
          else
            echo "❌ FAIL: Hardcoded input does NOT match!"
            exit 1
          fi

      # 📦 Step 4: Run pip download (example)
      - name: 📦 Download wheels using pip
        run: |
          echo "🚀 Downloading wheels: $WHEELS"
          # 示例：下载到 ./wheels 目录
          pip download $WHEELS -d ./wheels --no-deps
          echo "✅ Wheels downloaded to ./wheels/"

      # 📤 Step 5: Upload wheels (optional)
      - name: 📤 Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-artifact
          path: ./wheels/
          if-no-files-found: ignore
