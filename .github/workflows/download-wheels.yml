name: Download Wheels (Auto-Resolve)

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0'
      wheel_names:
        description: |
          Comma-separated list of wheel filenames (e.g.,
          watchdog-6.0.0-cp39-cp39-manylinux2014_x86_64.whl,
          requests-2.31.0-py3-none-any.whl)
        required: true
        default: ''

jobs:
  download-wheels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install pip-tools (for pip download)
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Prepare wheel list (robust version)
        id: parse_wheels
        run: |
          # 获取输入并清理
          input=$(echo "$INPUT_WHEEL_NAMES" | tr -d '\n\r' | xargs)  # 去除换行、回车、首尾空格
          wheels=()

          # 分割（支持逗号分隔，允许空格）
          IFS=',' read -ra WHEEL_ARRAY <<< "$input"

          for wheel in "${WHEEL_ARRAY[@]}"; do
            wheel=$(echo "$wheel" | xargs)  # 去除前后空格
            if [[ -z "$wheel" ]]; then
              continue
            fi

            # 更强的正则：匹配 package-version 结构，忽略后面的 cpXXX、manylinux 等
            if [[ "$wheel" =~ ^([a-zA-Z0-9_-]+)-([0-9]+\.[0-9]+\.[0-9]+)(?:-[a-zA-Z0-9_.]+)*\.whl$ ]]; then
              pkg_name="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              wheels+=("$pkg_name==$version")
              echo "✅ Matched: $wheel → $pkg_name==$version"
            else
              echo "❌ Failed to parse: $wheel"
              echo "  Hint: Expected format: package-version-cpXX-...whl"
            fi
          done

          # 检查是否有有效 wheel
          if [ ${#wheels[@]} -eq 0 ]; then
            echo "⚠️  No valid wheel names found after parsing."
            echo "  Please check your input format and ensure it's comma-separated."
            echo "  Example: watchdog-6.0.0-cp39-cp39-manylinux2014_x86_64.whl,requests-2.31.0-py3-none-any.whl"
            exit 1
          fi

          # 输出到环境变量
          echo "WHEELS=$(printf '%s ' "${wheels[@]}")" >> $GITHUB_ENV
          echo "🔍 Final packages to download: $WHEELS"


      - name: Create wheels directory
        run: mkdir -p ./wheels

      - name: Download wheels using pip download
        run: |
          echo "🚀 Starting pip download..."
          echo "Packages to download: $WHEELS"
          echo "$WHEELS" | xargs -I {} sh -c 'pip download --dest ./wheels --no-deps {}'
          echo "✅ All wheels downloaded to ./wheels/"

      - name: List downloaded wheels
        run: |
          echo "📁 Contents of ./wheels:"
          ls -la ./wheels/

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ inputs.release_tag }}
          path: ./wheels/
          if-no-files-found: ignore

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // 读取下载的 wheel 文件
            const wheelDir = './wheels';
            const files = fs.readdirSync(wheelDir).filter(file => file.endsWith('.whl'));

            if (files.length === 0) {
              console.log('⚠️  No wheel files found to upload.');
              return;
            }

            const releaseTag = process.env.RELEASE_TAG || context.ref.replace('refs/tags/', '');
            const releaseName = `Release ${releaseTag}`;

            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: releaseTag,
              name: releaseName,
              body: `Automated release with wheels for ${files.join(', ')}.`,
              draft: false,
              prerelease: false,
            });

            console.log(`✅ Release created: ${release.html_url}`);

            // 上传每个 wheel 文件
            for (const file of files) {
              const filePath = path.join(wheelDir, file);
              const fileContent = fs.readFileSync(filePath);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: file,
                data: fileContent,
              });
              console.log(`📤 Uploaded: ${file}`);
            }

      - name: Print success message
        run: |
          echo "🎉 Workflow completed successfully!"
          echo "📦 Wheels uploaded to release: ${{ steps.create_release.outputs.url }}"
